{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

    "delay": {
        "prefix": "delay",
        "scope": "javascript,typescript",
        "body": [
            "const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));",
        ],
        "description": "delay"
    },
    "ddelay": {
        "prefix": "ddelay",
        "scope": "javascript,typescript",
        "body": [
            "await new Promise(resolve => setTimeout(resolve, ${1:delay}));",
        ],
        "description": "ddelay"
    },

    "arrow function": {
        "prefix": "rr",
        "scope": "javascript,typescript",
        "body": [
            "const $1 = ($2) => {",
            "\t",
            "}"
        ],
        "description": "arrow function"
    },

    "function": {
        "prefix": "ff",
        "scope": "javascript,typescript",
        "body": [
            "function $1 ($2) {",
            "\t",
            "}"
        ],
        "description": "function"
    },

    "console.log()": {
        "prefix": "clg",
        "scope": "javascript,typescript",
        "body": "console.log(${1:object});",
        "description": "Displays a message in the console"
    },
    "console.log({})": {
        "prefix": "clgo",
        "scope": "javascript,typescript",
        "body": "console.log({${1:object}});",
        "description": "Displays a message in the console like object"
    },
    "console.warn()": {
        "prefix": "cwn",
        "scope": "javascript,typescript",
        "body": "console.warn(${1:object});",
        "description": "Displays a message in the console warning"
    },
    "console.warn({})": {
        "prefix": "cwno",
        "scope": "javascript,typescript",
        "body": "console.warn({${1:object}});",
        "description": "Displays a message in the console warning like object"
    },
    "console.error()": {
        "prefix": "cer",
        "scope": "javascript,typescript",
        "body": "console.error(${1:object});",
        "description": "Displays a message in the console error"
    },
    "console.error({})": {
        "prefix": "cero",
        "scope": "javascript,typescript",
        "body": "console.error({${1:object}});",
        "description": "Displays a message in the console error like object"
    },

	"describe": {
		"scope": "javascript,typescript",
		"prefix": "dd",
		"body": [
            "// eslint-disable-next-line no-undef",
			"describe(`Pruebas en <${TM_FILENAME/^(.*)\\.test\\.(jsx|js|tsx|ts)$/$1/}/>`, () => {",
            "\t// eslint-disable-next-line no-undef",
			"\ttest(`debe $2`, () => {",
            "\t\t$3",
            "\t});",
            "",
            "});",
		],
		"description": "describe test"
	},

    "test": {
		"scope": "javascript,typescript",
		"prefix": "tt",
		"body": [
            "// eslint-disable-next-line no-undef",
			"test(`debe $2`, () => {",
            "\t$3",
            "});",
		],
		"description": "test"
	},
    
    "expect": {
		"scope": "javascript,typescript",
		"prefix": "ee",
		"body": [
            "// eslint-disable-next-line no-undef",
		    "expect($1)$2;",
		],
		"description": "expect"
	},
    "waitFor": {
		"scope": "javascript,typescript",
		"prefix": "ww",
		"body": [
            "await waitFor(",
            "\t// eslint-disable-next-line no-undef",
            "\t()=> expect($1)$2",
            ")",
		],
		"description": "expect"
	},

    "import propTypes": {
		"scope": "javascript,typescript",
		"prefix": "ipt",
		"body": [
            "import PropTypes from 'prop-types';",
		],
		"description": "propTypes"
	},

    "propTypes": {
		"scope": "javascript,typescript",
		"prefix": "pt",
		"body": [
		    "${TM_FILENAME/(\\.[^.]+)$//}.propTypes = {",
            "\t$1",
            "};",
		],
		"description": "propTypes"
	},

    "defaultTypes": {
		"scope": "javascript,typescript",
		"prefix": "df",
		"body": [
		    "${TM_FILENAME/(\\.[^.]+)$//}.defaultTypes = {",
            "\t$1",
            "};",
		],
		"description": "defaultTypes"
	},

    "react function component": {
		"scope": "javascript,typescript",
		"prefix": "rea",
		"body": [
		    "function ${TM_FILENAME/(\\.[^.]+)$//} ($1) {",
            "\n",
            "\treturn (",
            "\t\t<$2>",
            "\t\t\t${3:<h1>${TM_FILENAME/(\\.[^.]+)$//}</h1>}$4",
            "\t\t</$2>",
            "\t);",
            "}",
            "",
            "export default ${TM_FILENAME/(\\.[^.]+)$//};",
		],
		"description": "react function component"
	},

    "react function component types": {
		"scope": "javascript,typescript",
		"prefix": "reaa",
		"body": [
		    "function ${TM_FILENAME/(\\.[^.]+)$//} ($1) {",
            "\n",
            "\treturn (",
            "\t\t<$2>",
            "\t\t\t${3:<h1>${TM_FILENAME/(\\.[^.]+)$//}</h1>}$4",
            "\t\t</$2>",
            "\t);",
            "};",
            "",
            "export default ${TM_FILENAME/(\\.[^.]+)$//};",
            "",
            "${TM_FILENAME/(\\.[^.]+)$//}.propTypes = {",
            "\t$3",
            "}",
            "",
            "${TM_FILENAME/(\\.[^.]+)$//}.defaultTypes = {",
            "\t$4",
            "};",
		],
		"description": "react function component types"
	},

    "custom hook": {
		"scope": "javascript,typescript",
		"prefix": ["oo","hook"],
		"body": [
		    "function ${TM_FILENAME/(\\.[^.]+)$//} ($1) {",
            "\n",
            "\t$2\n",
            "\treturn {};",
            "}",
            "",
            "export default ${TM_FILENAME/(\\.[^.]+)$//};",
		],
		"description": "custom hook"
	},

    "useState": {
		"scope": "javascript,typescript",
		"prefix": "state",
		"body": [
		          "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});"
		],
		"description": "useState"
	},

    "useEffect": {
		"scope": "javascript,typescript",
		"prefix": "effect",
		"body": [
		          "useEffect(()=>{",
                  "\t",
                  "\t${1:first}",
                  "\t",
                  "\treturn () => {",
                  "\t\t${2:second}",
                  "\t}",
                  "\t",
                  "},[${3:third}]);"
		],
		"description": "useEffect"
	},

    "useRef": {
		"scope": "javascript,typescript",
		"prefix": "rref",
		"body": [
		          "const ${1:first} = useRef(${2:second});",
		],
		"description": "useRef"
	},

    "useLayoutEffect": {
		"scope": "javascript,typescript",
		"prefix": ["leffect","layoutEffect"],
		"body": [
		          "useLayoutEffect(()=>{",
                  "\t",
                  "\t${1:first}",
                  "\t",
                  "\treturn () => {",
                  "\t\t${2:second}",
                  "\t}",
                  "\t",
                  "},[${3:third}]);"
		],
		"description": "useLayoutEffect"
	},


}